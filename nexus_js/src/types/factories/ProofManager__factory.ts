/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { ProofManager, ProofManagerInterface } from "../ProofManager";

const _abi = [
  {
    type: "function",
    name: "getChainState",
    inputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "nexusAppID",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "latestNexusBlockNumber",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "nexusAppIdToLatestBlockNumber",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "nexusAppIdToState",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "nexusBlock",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "stateRoot",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "blockHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "updateChainState",
    inputs: [
      {
        name: "nexusBlockNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "siblings",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "key",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "accountState",
        type: "tuple",
        internalType: "struct NexusProofManager.AccountState",
        components: [
          {
            name: "statementDigest",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "stateRoot",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "startNexusHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "lastProofHeight",
            type: "uint128",
            internalType: "uint128",
          },
          {
            name: "height",
            type: "uint128",
            internalType: "uint128",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateNexusBlock",
    inputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "nexusBlockInfo",
        type: "tuple",
        internalType: "struct NexusProofManager.NexusBlock",
        components: [
          {
            name: "stateRoot",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "blockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "verifyRollupState",
    inputs: [
      {
        name: "root",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "proof",
        type: "tuple",
        internalType: "struct JellyfishMerkleTreeVerifier.Proof",
        components: [
          {
            name: "leaf",
            type: "tuple",
            internalType: "struct JellyfishMerkleTreeVerifier.Leaf",
            components: [
              {
                name: "addr",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "valueHash",
                type: "bytes32",
                internalType: "bytes32",
              },
            ],
          },
          {
            name: "siblings",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
        ],
      },
      {
        name: "leaf",
        type: "tuple",
        internalType: "struct JellyfishMerkleTreeVerifier.Leaf",
        components: [
          {
            name: "addr",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "valueHash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "error",
    name: "AlreadyUpdatedBlock",
    inputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidBlockNumber",
    inputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "latestBlockNumber",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NexusLeafInclusionCheckFailed",
    inputs: [],
  },
] as const;

export class ProofManager__factory {
  static readonly abi = _abi;
  static createInterface(): ProofManagerInterface {
    return new Interface(_abi) as ProofManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ProofManager {
    return new Contract(address, _abi, runner) as unknown as ProofManager;
  }
}
