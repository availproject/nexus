/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export declare namespace NexusProofManager {
  export type AccountStateStruct = {
    statementDigest: BytesLike;
    stateRoot: BytesLike;
    startNexusHash: BytesLike;
    lastProofHeight: BigNumberish;
    height: BigNumberish;
  };

  export type AccountStateStructOutput = [
    statementDigest: string,
    stateRoot: string,
    startNexusHash: string,
    lastProofHeight: bigint,
    height: bigint
  ] & {
    statementDigest: string;
    stateRoot: string;
    startNexusHash: string;
    lastProofHeight: bigint;
    height: bigint;
  };

  export type NexusBlockStruct = { stateRoot: BytesLike; blockHash: BytesLike };

  export type NexusBlockStructOutput = [
    stateRoot: string,
    blockHash: string
  ] & { stateRoot: string; blockHash: string };
}

export declare namespace JellyfishMerkleTreeVerifier {
  export type LeafStruct = { addr: BytesLike; valueHash: BytesLike };

  export type LeafStructOutput = [addr: string, valueHash: string] & {
    addr: string;
    valueHash: string;
  };

  export type ProofStruct = {
    leaf: JellyfishMerkleTreeVerifier.LeafStruct;
    siblings: BytesLike[];
  };

  export type ProofStructOutput = [
    leaf: JellyfishMerkleTreeVerifier.LeafStructOutput,
    siblings: string[]
  ] & {
    leaf: JellyfishMerkleTreeVerifier.LeafStructOutput;
    siblings: string[];
  };
}

export interface ProofManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getChainState"
      | "latestNexusBlockNumber"
      | "nexusAppIdToLatestBlockNumber"
      | "nexusAppIdToState"
      | "nexusBlock"
      | "updateChainState"
      | "updateNexusBlock"
      | "verifyRollupState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getChainState",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestNexusBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nexusAppIdToLatestBlockNumber",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nexusAppIdToState",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nexusBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainState",
    values: [
      BigNumberish,
      BytesLike[],
      BytesLike,
      NexusProofManager.AccountStateStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNexusBlock",
    values: [BigNumberish, NexusProofManager.NexusBlockStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRollupState",
    values: [
      BytesLike,
      JellyfishMerkleTreeVerifier.ProofStruct,
      JellyfishMerkleTreeVerifier.LeafStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getChainState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestNexusBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nexusAppIdToLatestBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nexusAppIdToState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nexusBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateChainState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNexusBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRollupState",
    data: BytesLike
  ): Result;
}

export interface ProofManager extends BaseContract {
  connect(runner?: ContractRunner | null): ProofManager;
  waitForDeployment(): Promise<this>;

  interface: ProofManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getChainState: TypedContractMethod<
    [blockNumber: BigNumberish, nexusAppID: BytesLike],
    [string],
    "view"
  >;

  latestNexusBlockNumber: TypedContractMethod<[], [bigint], "view">;

  nexusAppIdToLatestBlockNumber: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  nexusAppIdToState: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  nexusBlock: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { stateRoot: string; blockHash: string }],
    "view"
  >;

  updateChainState: TypedContractMethod<
    [
      nexusBlockNumber: BigNumberish,
      siblings: BytesLike[],
      key: BytesLike,
      accountState: NexusProofManager.AccountStateStruct
    ],
    [void],
    "nonpayable"
  >;

  updateNexusBlock: TypedContractMethod<
    [
      blockNumber: BigNumberish,
      nexusBlockInfo: NexusProofManager.NexusBlockStruct
    ],
    [void],
    "nonpayable"
  >;

  verifyRollupState: TypedContractMethod<
    [
      root: BytesLike,
      proof: JellyfishMerkleTreeVerifier.ProofStruct,
      leaf: JellyfishMerkleTreeVerifier.LeafStruct
    ],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getChainState"
  ): TypedContractMethod<
    [blockNumber: BigNumberish, nexusAppID: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestNexusBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nexusAppIdToLatestBlockNumber"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "nexusAppIdToState"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "nexusBlock"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { stateRoot: string; blockHash: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateChainState"
  ): TypedContractMethod<
    [
      nexusBlockNumber: BigNumberish,
      siblings: BytesLike[],
      key: BytesLike,
      accountState: NexusProofManager.AccountStateStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateNexusBlock"
  ): TypedContractMethod<
    [
      blockNumber: BigNumberish,
      nexusBlockInfo: NexusProofManager.NexusBlockStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyRollupState"
  ): TypedContractMethod<
    [
      root: BytesLike,
      proof: JellyfishMerkleTreeVerifier.ProofStruct,
      leaf: JellyfishMerkleTreeVerifier.LeafStruct
    ],
    [void],
    "view"
  >;

  filters: {};
}
