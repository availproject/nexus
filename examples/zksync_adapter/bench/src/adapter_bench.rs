use nexus_core::types::{AccountState, AppAccountId, StatementDigest, H256 as NexusH256};
#[cfg(feature = "risc0")]
use nexus_core::zkvm::risczero::{RiscZeroProof as Proof, RiscZeroProver as Prover, ZKVM};
#[cfg(feature = "sp1")]
use nexus_core::zkvm::sp1::{Sp1Proof as Proof, Sp1Prover as Prover, SP1ZKVM as ZKVM};
use nexus_core::zkvm::ProverMode;
use std::env;
use std::fs;
use std::path::PathBuf;
use std::str::FromStr;
use std::time::Instant;
use zksync_basic_types::{protocol_version::ProtocolVersionId, H256};
use zksync_core::types::{
    BaseSystemContractsHashes, L1BatchHeader, L1BatchMetaParameters, L1BatchMetadata,
    L1BatchNumber, L1BatchWithMetadata,
};
use zksync_core::STF;
#[cfg(feature = "risc0")]
use zksync_methods::{ZKSYNC_ADAPTER_ELF, ZKSYNC_ADAPTER_ID};

#[cfg(any(feature = "sp1"))]
use env_logger;

#[cfg(any(feature = "sp1"))]
use log;

// move the constants to a different file 
pub fn get_mock_l1_batch_with_metadata() -> L1BatchWithMetadata {
    L1BatchWithMetadata {
        header: L1BatchHeader::new(
            L1BatchNumber(1),
            1728327372,
            BaseSystemContractsHashes {
                bootloader: H256::from_str(
                    "0x010008e742608b21bf7eb23c1a9d0602047e3618b464c9b59c0fba3b3d7ab66e",
                )
                .unwrap(),
                default_aa: H256::from_str(
                    "0x01000563374c277a2c1e34659a2a1e87371bb6d852ce142022d497bfb50b9e32",
                )
                .unwrap(),
            },
            ProtocolVersionId::Version24,
        ),
        metadata: L1BatchMetadata {
            root_hash: H256::from_str(
                "0x58bfe5c8a393c0d907ae261a9538ff3b8c55779bb887063bed04f2e4e0968440",
            )
            .unwrap(),
            rollup_last_leaf_index: 103,
            initial_writes_compressed: None,
            repeated_writes_compressed: None,
            commitment: H256::from_str(
                "0x08bddba900482145e4d36f0c3700fab6ba0426f4208a9513d06d53e9eaf36b3b",
            )
            .unwrap(),
            l2_l1_merkle_root: H256::zero(),
            block_meta_params: L1BatchMetaParameters {
                zkporter_is_available: false,
                bootloader_code_hash: H256::from_str(
                    "0x010008e742608b21bf7eb23c1a9d0602047e3618b464c9b59c0fba3b3d7ab66e",
                )
                .unwrap(),
                default_aa_code_hash: H256::from_str(
                    "0x01000563374c277a2c1e34659a2a1e87371bb6d852ce142022d497bfb50b9e32",
                )
                .unwrap(),
                protocol_version: Some(ProtocolVersionId::Version24),
            },
            aux_data_hash: H256::from_str(
                "0x2e1521a507f0d79e67647570cf8ceda64966e83fe8820130063190f357f5db12",
            )
            .unwrap(),
            meta_parameters_hash: H256::from_str(
                "0x0ea96ceae09ed102d4e4687901e47070ef55ec06b5e8a54989c49effc9abf376",
            )
            .unwrap(),
            pass_through_data_hash: H256::from_str(
                "0x2d2caebdef0fd0f2e46e20246f43913edf85c456d7e0d8b32620e8f6b7b2fe4d",
            )
            .unwrap(),
            events_queue_commitment: Some(
                H256::from_str(
                    "0xb4d64ed3f203be8ab566aa1d3f27a360596dad0610f4888bd6c2272a09fd59de",
                )
                .unwrap(),
            ),
            bootloader_initial_content_commitment: Some(
                H256::from_str(
                    "0xf4cb72334719a21d7b9ddde2f0a9f0feb60ccd71f431f532a83f8beeb9818646",
                )
                .unwrap(),
            ),
            state_diffs_compressed: vec![
                1, 0, 9, 90, 4, 0, 49, 177, 240, 128, 238, 238, 182, 82, 141, 1, 160, 98, 180, 227,
                228, 221, 196, 142, 57, 20, 212, 100, 236, 144, 58, 128, 36, 183, 31, 133, 96, 15,
                162, 0, 1, 0, 0, 105, 31, 164, 247, 81, 248, 49, 43, 197, 85, 36, 47, 24, 237, 120,
                205, 201, 170, 188, 14, 167, 125, 125, 90, 103, 94, 232, 172, 111, 117, 1, 103, 27,
                173, 49, 90, 105, 173, 1, 79, 167, 83, 82, 141, 179, 222, 68, 24, 237, 50, 219,
                161, 238, 161, 31, 53, 214, 29, 145, 18, 10, 0, 1, 0, 2, 25, 231, 174, 3, 121, 156,
                112, 204, 202, 158, 202, 75, 148, 178, 153, 4, 153, 208, 151, 227, 130, 121, 206,
                103, 120, 204, 140, 97, 20, 255, 139, 250, 34, 239, 203, 31, 249, 104, 104, 243,
                186, 215, 153, 225, 129, 166, 16, 97, 244, 235, 243, 179, 116, 17, 239, 59, 159,
                34, 232, 138, 96, 0, 1, 0, 1, 93, 73, 210, 151, 103, 184, 104, 49, 125, 82, 74, 30,
                248, 152, 86, 82, 147, 45, 75, 232, 153, 100, 149, 58, 1, 147, 16, 38, 201, 27,
                249, 214, 18, 111, 136, 17, 182, 100, 87, 232, 121, 203, 114, 193, 99, 96, 198,
                230, 72, 56, 37, 75, 156, 136, 51, 236, 47, 141, 211, 148, 222, 0, 1, 0, 1, 93, 73,
                210, 151, 103, 184, 104, 49, 125, 82, 74, 30, 248, 152, 86, 82, 147, 45, 75, 232,
                153, 100, 149, 58, 1, 147, 16, 38, 201, 143, 113, 129, 125, 63, 73, 13, 244, 90,
                91, 59, 236, 227, 77, 58, 97, 116, 131, 126, 130, 187, 113, 196, 167, 110, 146,
                187, 210, 205, 16, 183, 87, 0, 1, 0, 1, 249, 88, 68, 75, 234, 23, 102, 45, 209, 98,
                185, 128, 244, 40, 122, 86, 61, 242, 26, 51, 112, 152, 0, 253, 78, 184, 166, 176,
                29, 170, 122, 175, 188, 221, 150, 160, 38, 43, 28, 81, 161, 56, 36, 238, 114, 245,
                148, 155, 123, 68, 197, 250, 66, 198, 166, 172, 97, 44, 61, 11, 130, 0, 1, 0, 5,
                31, 143, 11, 71, 247, 253, 6, 191, 98, 98, 26, 188, 198, 69, 138, 191, 238, 70,
                249, 100, 190, 30, 220, 220, 156, 141, 52, 66, 159, 61, 209, 129, 73, 191, 187,
                226, 149, 62, 89, 184, 115, 2, 157, 42, 211, 213, 42, 218, 252, 26, 215, 176, 17,
                203, 180, 120, 23, 159, 183, 93, 167, 0, 1, 0, 4, 117, 22, 136, 171, 147, 34, 150,
                21, 71, 5, 143, 208, 243, 109, 62, 223, 105, 136, 11, 100, 203, 178, 133, 112, 65,
                211, 63, 74, 19, 48, 136, 12, 247, 121, 54, 179, 116, 8, 239, 178, 111, 65, 77,
                169, 144, 165, 39, 224, 136, 242, 247, 128, 131, 4, 77, 53, 210, 113, 254, 227,
                146, 0, 1, 0, 0, 213, 109, 228, 139, 48, 171, 22, 203, 41, 139, 103, 66, 52, 68,
                191, 63, 110, 241, 215, 15, 235, 117, 194, 221, 47, 182, 124, 111, 198, 133, 236,
                15, 12, 125, 120, 178, 210, 29, 133, 66, 171, 76, 62, 95, 156, 49, 38, 88, 163,
                176, 202, 12, 137, 77, 5, 147, 223, 147, 173, 6, 35, 0, 1, 0, 0, 91, 21, 0, 139,
                195, 246, 231, 68, 89, 183, 2, 22, 191, 4, 93, 42, 2, 200, 223, 123, 7, 247, 231,
                87, 231, 227, 7, 154, 148, 0, 159, 186, 133, 75, 226, 253, 235, 173, 50, 111, 19,
                111, 136, 219, 244, 177, 114, 214, 77, 28, 237, 51, 180, 171, 99, 164, 148, 28,
                226, 73, 151, 137, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 10, 110,
                165, 233, 197, 104, 158, 127, 70, 74, 197, 168, 37, 234, 203, 92, 20, 14, 196, 203,
                116, 147, 236, 251, 221, 12, 78, 127, 229, 234, 108, 137, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 203, 42, 231, 189, 33, 40, 52, 156, 9, 206, 59, 90,
                125, 230, 18, 140, 217, 94, 139, 170, 90, 98, 205, 14, 66, 83, 3, 248, 89, 103,
                173, 137, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 46, 249, 72, 44,
                189, 129, 20, 159, 235, 215, 120, 27, 62, 203, 34, 42, 241, 172, 94, 1, 202, 168,
                7, 231, 73, 81, 122, 85, 25, 96, 107, 9, 1, 201, 12, 192, 40, 16, 185, 197, 247,
                175, 35, 51, 119, 23, 253, 37, 85, 53, 244, 160, 248, 185, 24, 71, 156, 173, 242,
                18, 104, 2, 205, 229, 40, 9, 1, 112, 56, 163, 20, 62, 92, 42, 10, 19, 186, 62, 37,
                140, 172, 15, 126, 106, 155, 108, 137, 235, 188, 12, 199, 177, 7, 174, 219, 201,
                129, 97, 144, 9, 1, 161, 97, 178, 56, 211, 36, 82, 197, 242, 204, 40, 220, 67, 190,
                72, 237, 17, 168, 158, 71, 188, 170, 27, 168, 135, 152, 20, 193, 109, 114, 180,
                101, 9, 1, 53, 195, 21, 165, 24, 203, 255, 88, 218, 98, 144, 221, 47, 154, 46, 101,
                152, 67, 17, 51, 180, 234, 92, 63, 131, 124, 238, 131, 162, 91, 207, 205, 9, 1,
                218, 223, 37, 123, 169, 175, 154, 198, 166, 25, 17, 145, 5, 228, 87, 230, 239, 7,
                108, 0, 171, 225, 28, 0, 70, 98, 129, 170, 83, 44, 133, 213, 9, 1, 173, 247, 187,
                78, 214, 85, 136, 8, 200, 180, 76, 34, 23, 227, 83, 63, 211, 175, 208, 108, 208,
                176, 202, 109, 189, 80, 231, 27, 164, 34, 225, 84, 9, 1, 189, 253, 67, 39, 223,
                248, 126, 161, 44, 246, 229, 52, 103, 71, 120, 186, 99, 186, 55, 37, 243, 253, 202,
                59, 54, 168, 147, 254, 86, 66, 222, 99, 9, 1, 214, 173, 28, 14, 245, 96, 197, 216,
                45, 29, 164, 235, 54, 207, 4, 190, 107, 253, 202, 59, 134, 200, 142, 139, 232, 178,
                16, 213, 106, 147, 18, 89, 9, 1, 201, 63, 62, 228, 151, 236, 103, 103, 57, 186,
                124, 152, 151, 28, 105, 180, 152, 12, 78, 199, 94, 55, 73, 177, 16, 158, 200, 24,
                80, 242, 127, 192, 17, 1, 14, 113, 233, 23, 33, 249, 145, 133, 118, 215, 96, 240,
                47, 3, 202, 196, 124, 111, 64, 3, 49, 96, 49, 132, 142, 60, 29, 153, 230, 232, 58,
                71, 67, 65, 4, 75, 235, 143, 70, 118, 0, 0, 185, 211, 150, 83, 253, 116, 26, 253,
                56, 22, 83, 204, 70, 30, 122, 203, 221, 134, 84, 251, 39, 141, 138, 17, 246, 159,
                212, 31, 236, 239, 75, 201, 65, 3, 192, 72, 153, 200, 59, 55, 176, 163, 116, 183,
                61, 174, 41, 143, 198, 78, 51, 202, 249, 81, 253, 161, 130, 235, 143, 234, 167,
                112, 20, 201, 254, 198, 143, 144, 136, 77, 80, 209, 72, 57, 137, 51, 165, 172, 73,
                212, 160, 245, 107, 239, 32, 10, 248, 123, 98, 201, 245, 219, 108, 22, 135, 152,
                171, 59, 163, 132, 238, 99, 214, 227, 11, 9, 20, 233, 202, 44, 91, 27, 37, 57, 2,
                111, 79, 209, 240, 243, 176, 162, 84, 32, 193, 217, 215, 5, 53, 140, 19, 76, 198,
                1, 217, 209, 132, 203, 77, 253, 222, 126, 28, 172, 43, 195, 212, 211, 139, 249,
                236, 68, 230, 33, 5, 245, 225, 0, 18, 59, 175, 197, 134, 247, 119, 100, 72, 140,
                210, 76, 106, 119, 84, 110, 90, 15, 232, 189, 251, 79, 162, 3, 207, 175, 252, 54,
                204, 228, 221, 91, 137, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 4, 46, 204,
                142, 125, 208, 106, 197, 183, 59, 71, 59, 230, 188, 90, 81, 3, 15, 76, 116, 55,
                101, 124, 183, 178, 155, 243, 118, 197, 100, 184, 209, 103, 90, 94, 137, 2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 4, 46, 205, 75, 168, 78, 31, 55, 208, 65, 188,
                110, 85, 186, 57, 104, 38, 204, 73, 78, 132, 212, 129, 91, 109, 181, 38, 144, 66,
                46, 234, 115, 134, 49, 79, 0, 232, 231, 118, 38, 88, 111, 115, 185, 85, 54, 76,
                123, 75, 191, 11, 183, 247, 104, 94, 189, 64, 232, 82, 177, 100, 99, 58, 74, 203,
                211, 36, 76, 61, 226, 32, 44, 203, 98, 106, 211, 135, 215, 7, 34, 230, 79, 190, 68,
                86, 46, 47, 35, 26, 41, 12, 8, 83, 43, 141, 106, 186, 64, 47, 245, 0, 45, 242, 158,
                117, 21, 197, 223, 50, 176, 16, 188, 119, 217, 248, 85, 183, 201, 231, 7, 250, 110,
                35, 12, 36, 202, 115, 207, 34, 49, 214, 119, 142, 121, 9, 53, 136, 208, 232, 71,
                239, 167, 58, 16, 206, 32, 228, 121, 159, 177, 228, 102, 66, 214, 86, 23, 199, 229,
                33, 63, 160, 73, 137, 217, 45, 137, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 4,
                46, 205, 135, 222, 210, 71, 225, 102, 15, 130, 112, 113, 199, 241, 55, 25, 52, 88,
                151, 81, 8, 83, 132, 252, 159, 68, 98, 193, 241, 137, 124, 92, 62, 239, 137, 1, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 134, 36, 129, 147, 235, 77, 210, 168,
                206, 129, 95, 135, 108, 18, 77, 72, 53, 149, 34, 240, 133, 77, 149, 216, 7, 46,
                175, 240, 211, 125, 85, 189, 17, 3, 32, 62, 137, 13, 108, 44, 59, 173, 166, 238,
                204, 150, 3, 169, 156, 28, 98, 89, 237, 90, 100, 2, 241, 199, 108, 193, 139, 86,
                140, 58, 239, 186, 15, 17, 6, 218, 145, 29, 210, 173, 116, 63, 242, 55, 212, 17,
                100, 138, 15, 227, 44, 109, 116, 238, 192, 96, 113, 106, 42, 116, 53, 47, 107, 28,
                67, 91, 93, 103, 0, 171, 219, 118, 107, 24, 164, 121, 165, 199, 131, 164, 184, 14,
                18, 104, 107, 200, 234, 60, 194, 216, 163, 5, 4, 145, 183, 1, 215, 35, 112, 235,
                181, 158, 105, 89, 184, 16, 82, 93, 161, 198, 83, 111, 180, 4, 31, 77, 253, 38,
                179, 64, 205, 108, 253, 242, 158, 237, 136, 65, 14, 122, 198, 76, 180, 161, 54,
                204, 111, 148, 98, 66, 54, 190, 217, 61, 233, 240, 145, 13, 220, 181, 56, 3, 149,
                154, 210, 147, 103, 180, 29, 156, 174, 112, 224, 1, 112, 135, 167, 84, 55, 80, 35,
                84, 243, 111, 165, 202, 122, 35, 101, 142, 170, 21, 101, 75, 233, 140, 161, 171,
                11, 66, 7, 107, 56, 253, 84, 150, 4, 25, 126, 193, 104, 3, 168, 38, 190, 29, 208,
                156, 198, 15, 71, 201, 68, 36, 199, 232, 196, 240, 49, 193, 208, 63, 116, 130, 107,
                226, 53, 165, 190, 111, 173, 134, 146, 104, 35, 2, 94, 232, 86, 177, 89, 230, 101,
                66, 35, 165, 217, 44, 102, 16, 57, 254, 183, 238, 248, 165, 43, 117, 116, 60, 0, 2,
                63, 70, 85, 220, 58, 51, 111, 60, 2, 154, 222, 245, 51, 113, 125, 89, 91, 134, 234,
                245, 1, 178, 66, 105, 205, 199, 163, 132, 254, 236, 166, 136, 161, 26, 226, 144,
                72, 129, 234, 35, 131, 29, 63, 61, 94, 98, 119, 150, 137, 136, 192, 209, 66, 28,
                220, 88, 60, 113, 139, 130, 191, 7, 229, 66, 100, 203, 166, 254, 20, 148, 92, 21,
                190, 68, 226, 52, 38, 245, 216, 205, 241, 47, 130, 84, 106, 0, 1, 0, 1, 33, 27, 12,
                51, 53, 60, 223, 122, 50, 15, 118, 142, 61, 196, 11, 206, 19, 38, 214, 57, 252,
                172, 9, 155, 186, 158, 205, 142, 52, 2, 175, 99, 95, 61, 244, 133, 217, 115, 68,
                177, 94, 103, 190, 205, 87, 221, 114, 218, 217, 139, 96, 92, 6, 165, 140, 253, 5,
                111, 80, 42, 64, 161, 137, 240, 134, 218, 251, 94, 117, 78, 8, 4, 50, 228, 45, 213,
                174, 101, 129, 7, 196, 19, 105, 5, 137, 233, 27, 239, 31, 82, 112, 135, 74, 206,
                165, 57, 188, 114, 11, 122, 247, 34, 61, 210, 186, 63, 118, 123, 164, 169, 144,
                137, 172, 213, 161, 54, 204, 111, 148, 98, 66, 54, 190, 217, 61, 233, 240, 145, 13,
                220, 181, 56, 3, 149, 154, 232, 40, 180, 187, 99, 162, 114, 196, 17, 53, 69, 116,
                160, 88, 4, 121, 94, 110, 156, 238, 31, 234, 222, 10, 37, 58, 200, 57, 64, 245,
                247, 160, 9, 1, 119, 91, 147, 185, 211, 178, 223, 246, 247, 50, 148, 133, 49, 167,
                243, 183, 129, 253, 239, 155, 56, 96, 68, 80, 55, 144, 37, 158, 26, 42, 33, 13,
                161, 37, 187, 111, 148, 98, 66, 54, 190, 217, 61, 233, 240, 145, 13, 220, 181, 56,
                3, 132, 137, 239, 106, 73, 125, 98, 106, 60, 94, 21, 178, 76, 1, 103, 72, 246, 154,
                95, 209, 76, 217, 74, 4, 131, 30, 223, 139, 162, 175, 225, 34, 66, 185, 161, 150,
                191, 37, 132, 209, 62, 165, 99, 29, 106, 182, 72, 65, 4, 16, 164, 99, 16, 222, 134,
                48, 167, 28, 229, 177, 54, 190, 88, 233, 199, 210, 160, 84, 100, 110, 125, 187,
                152, 81, 16, 188, 0, 125, 101, 107, 97, 226, 123, 200, 116, 78, 56, 161, 54, 204,
                111, 148, 98, 66, 54, 190, 217, 61, 233, 240, 145, 13, 220, 181, 56, 3, 149, 154,
                29, 20, 225, 11, 185, 129, 233, 217, 136, 150, 41, 30, 144, 47, 211, 25, 247, 14,
                231, 61, 12, 146, 40, 172, 101, 32, 79, 180, 183, 129, 172, 168, 9, 255, 238, 199,
                65, 72, 1, 223, 214, 82, 133, 143, 119, 157, 74, 25, 116, 122, 11, 195, 195, 164,
                92, 24, 27, 183, 118, 193, 160, 212, 157, 192, 41, 216, 9, 255, 0, 0, 0, 50, 9, 1,
            ],
        },
        raw_published_factory_deps: vec![],
    }
}

pub fn get_mock_proof() -> Vec<String> {
    vec![
        "13419774624802246849707163164953093276102905224157218382320181624777730094068",
        "21702951633099711306717881145938427726799789327370707773122814631477010326205",
        "20186025367334498694255507504402678811940244188836904498062782206441848697250",
        "16039531690348160018090498256674443197528542990354829451107302259962928282850",
        "132707291782303765828572041778387086902962737637807421744660716727545804275",
        "110063284841104705126513555976886214816472330146558077207949117074241791349",
        "10003489969952560577405356760442895893875954195040619332956504442747180613154",
        "5431062914231260721023730790821643729646618161395572022717822152654921342187",
        "11489010572900159354684580506809109719134838013476998375592344229760640008599",
        "2638113933436337221703062945729350077401381962121795898130919953249927197444",
        "16998513425303411322236067579537841706334300256481002601087797911219860770809",
        "20417478078605457833907004561552685764864612968694445173946073746811586091306",
        "14782693845525078265438908440658243793041203991564373946541929764344862894591",
        "18751351158268880774449205205524859789341365522230672846245609740983975074112",
        "12611146933143204764044915444725197681187967780239120732939339646040787480430",
        "21306319803824267966205341592147903653225000405210120851482129437524110980396",
        "8811081182231387191999401003281389569226112418513108560122804586224615574537",
        "9274649608753394985258657215409094334037920658849368738034287135225354649885",
        "6028308143464493410384282363234825623137167894834407817708556402483084133943",
        "16230420712910140674643955884932561568524697496273495232382830984670392920171",
        "12150865231097461994057152020594610105574745202230538983376699350135698576955",
        "6928549005084698979552600871476048284905414340973400605654189108535781408023",
        "10435019220664372008499359080747895951310924684214688225732544859935610849671",
        "1424333514635203043939328263954837814879457310144145264750105124515452656983",
        "3450358486293537127324504305271392033185497751663728044346274819849145956032",
        "11530141611913171731248542631729239935228029508182290857439011572045480457823",
        "17288113056600248783152128925700821331404053057184461146099657608889976513337",
        "8058588498323128944327338705962525082707281716564140996306243190889186604119",
        "4222795565004432813942657071388729820012773684736853134408643208563488073501",
        "9499803568135428079090862242357576936025860340438801409326675059033540929524",
        "7566436829487309839509364709469849783026050058055377166289245318668570716108",
        "13124365195234288926862452165188944292836460111475691472855074569065236447852",
        "17841505314467970516583948425040858790005299584115409361139083818420057285736",
        "2512960923181905226378554824533297932688922479077898640832000621089797801111",
        "16086964716583776650663283846802441150977256989941654847527395622797547936132",
        "7213567273107098922381754787766220775323211779010967784908924097048259712955",
        "19172252481315166456087382663465592512634029215687953935504818522229046925392",
        "3357686465507005712931770449714694875940794508066076988079411044241924084472",
        "16325921429395035820426791792009454815050565359595004796415537872232916523949",
        "11458257946808337084263787849570177978180567534175083586860980183506047811175",
        "1352160172633061416286540469494796771972653521528356574548275629610779010675",
        "3748766158879395269948733317921102364237204740114227154935411576780102480940",
        "10975230023456464665540181117219046666224551826985633541271700416035282108578",
        "20809813771764421222673075724819887428395378515112529750700667784746361877281",
    ]
    .iter()
    .map(|s| s.to_string())
    .collect()
}

fn create_mock_data() -> (
    Option<Proof>,
    Option<(AppAccountId, AccountState)>,
    Vec<String>,
    L1BatchWithMetadata,
    Vec<u8>,
    Vec<[u8; 32]>,
    NexusH256,
) {
    let prev_adapter_proof = None;
    let init_account = Some((
        AppAccountId([1u8; 32]),
        AccountState {
            statement: StatementDigest([3u32; 8]),
            state_root: [1u8; 32],
            start_nexus_hash: [2u8; 32],
            last_proof_height: 0,
            height: 0,
        },
    ));
    let new_rollup_proof = get_mock_proof();
    let new_rollup_pi = get_mock_l1_batch_with_metadata();
    let pubdata_commitments = vec![0u8; 10];
    let versioned_hashes = vec![[0u8; 32]; 5];
    let nexus_hash = NexusH256::zero();

    (
        prev_adapter_proof,
        init_account,
        new_rollup_proof,
        new_rollup_pi,
        pubdata_commitments,
        versioned_hashes,
        nexus_hash,
    )
}

fn main() {

    #[cfg(any(feature = "sp1"))]
    env_logger::Builder::from_env("RUST_LOG")
        .filter_level(log::LevelFilter::Info)
        .init();

    let (
        prev_adapter_proof,
        init_account,
        new_rollup_proof,
        new_rollup_pi,
        pubdata_commitments,
        versioned_hashes,
        nexus_hash,
    ) = create_mock_data();

    #[cfg(feature = "sp1")]
    let ZKSYNC_ADAPTER_ELF: &[u8] =
        include_bytes!("../../methods/sp1-guest/elf/riscv32im-succinct-zkvm-elf");
    #[cfg(feature = "sp1")]
    let ZKSYNC_ADAPTER_ID = [0u32; 8];

    let img_id = ZKSYNC_ADAPTER_ID;
    let elf = ZKSYNC_ADAPTER_ELF.to_vec(); // Mock ELF data
    let mut prover_mode = ProverMode::NoAggregation;
    
    for x in 0..2 {

    if x.clone() % 2 == 1 { prover_mode = ProverMode::Compressed}; 
    let stf = STF::new(img_id, elf.clone(), prover_mode.clone());

    let start = Instant::now();

    let recursive_proof = stf
        .create_recursive_proof::<Prover, Proof, ZKVM>(
            prev_adapter_proof.clone(),
            init_account.clone(),
            new_rollup_proof.clone(),
            new_rollup_pi.clone(),
            pubdata_commitments.clone(),
            versioned_hashes.clone(),
            nexus_hash,
        )
        .unwrap();

    let duration = start.elapsed();
    println!("Proof generation took: {:?}", duration);

    let current_dir = env::current_dir().unwrap();
    let mut out_sr_path = PathBuf::from(current_dir);
    #[cfg(feature = "risc0")]
    out_sr_path.push("succinct_receipt_risc0.bin");

    #[cfg(feature = "sp1")]
    out_sr_path.push("succinct_receipt_sp1.bin");
    let serialized_data = bincode::serialize(&recursive_proof).unwrap();
    let _ = fs::write(out_sr_path.clone(), serialized_data).unwrap();

    let metadata = fs::metadata(&out_sr_path).unwrap();
    let file_size = metadata.len();
    println!("Size of the binary file: {} bytes", file_size);
    }
}